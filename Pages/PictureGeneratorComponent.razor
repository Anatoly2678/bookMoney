@page "/create-art"
@layout MainLayout
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime

<style>
    .placeholder-container {
        min-height: 300px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .generated-image-container {
        transition: all 0.3s ease;
    }

        .generated-image-container:hover {
            transform: scale(1.02);
        }

    .example-card {
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .example-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

    .form-range::-webkit-slider-thumb {
        background-color: #0d6efd;
    }

    .form-range::-moz-range-thumb {
        background-color: #0d6efd;
    }
</style>

<PageTitle>Создать картину по описанию</PageTitle>

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card shadow-lg border-0">
                <div class="card-header bg-primary text-white py-3">
                    <h2 class="h4 mb-0 text-center">
                        <i class="fas fa-palette me-2"></i>Создание картины по описанию
                    </h2>
                </div>
                
                <div class="card-body p-4">
                    <!-- Форма ввода описания -->
                    <div class="row">
                        <div class="col-md-6">
                            <EditForm Model="@artDescription" OnValidSubmit="@GenerateArt">
                                <DataAnnotationsValidator />
                                
                                <div class="mb-4">
                                    <label for="description" class="form-label fw-semibold">Описание картины</label>
                                    <InputTextArea @bind-Value="artDescription.Description" 
                                                   class="form-control" 
                                                   id="description"
                                                   rows="6"
                                                   placeholder="Опишите картину, которую хотите создать..."></InputTextArea>
                                    <ValidationMessage For="@(() => artDescription.Description)" />
                                    <div class="form-text">
                                        Будьте как можно более подробны: укажите стиль, цвета, предметы, настроение.
                                    </div>
                                </div>

                                <div class="mb-4">
                                    <label class="form-label fw-semibold">Стиль картины</label>
                                    <div>
                                        @foreach (var style in artStyles)
                                        {
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" 
                                                       type="radio" 
                                                       name="artStyle" 
                                                       id="@style.Value"
                                                       checked="@(artDescription.Style == style.Value)"
                                                       @onchange="@(() => artDescription.Style = style.Value)" />
                                                <label class="form-check-label" for="@style.Value">
                                                    @style.Text
                                                </label>
                                            </div>
                                        }
                                    </div>
                                </div>

                                <div class="mb-4">
                                    <label for="complexity" class="form-label fw-semibold">
                                        Сложность: @artDescription.Complexity%
                                    </label>
                                    <input type="range" 
                                           class="form-range" 
                                           id="complexity"
                                           min="10" 
                                           max="100" 
                                           step="10"
                                           @bind="artDescription.Complexity" 
                                           @bind:event="oninput" />
                                    <div class="form-text">
                                        Уровень детализации и проработки картины.
                                    </div>
                                </div>

                                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                    <button type="button" class="btn btn-outline-secondary me-md-2" @onclick="ResetForm">
                                        <i class="fas fa-redo me-1"></i>Очистить
                                    </button>
                                    <button type="submit" class="btn btn-primary" disabled="@isGenerating">
                                        @if (isGenerating)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            <span>Генерация...</span>
                                        }
                                        else
                                        {
                                            <i class="fas fa-magic me-1"></i>
                                            <span>Создать картину...</span>    
                                        }
                                    </button>
                                </div>
                            </EditForm>
                        </div>
                        
                        <!-- Предпросмотр и результат -->
                        <div class="col-md-6">
                            <div class="sticky-top" style="top: 20px;">
                                <div class="card bg-light">
                                    <div class="card-header bg-secondary text-white">
                                        <h3 class="h6 mb-0">Предпросмотр</h3>
                                    </div>
                                    <div class="card-body text-center p-3">
                                        @if (string.IsNullOrEmpty(generatedImageUrl))
                                        {
                                            <div class="placeholder-container bg-white border rounded p-5">
                                                <i class="fas fa-image fa-4x text-muted mb-3"></i>
                                                <p class="text-muted">Здесь появится ваша картина</p>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="generated-image-container">
                                                <img src="@generatedImageUrl" 
                                                     alt="Сгенерированная картина" 
                                                     class="img-fluid rounded shadow-sm" />
                                                <div class="mt-3">
                                                    <button class="btn btn-success btn-sm me-2" @onclick="DownloadImage">
                                                        <i class="fas fa-download me-1"></i>Скачать
                                                    </button>
                                                    <button class="btn btn-outline-primary btn-sm" @onclick="ShareImage">
                                                        <i class="fas fa-share-alt me-1"></i>Поделиться
                                                    </button>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                                
                                <!-- История генераций -->
                                @if (generationHistory.Any())
                                {
                                    <div class="card mt-3">
                                        <div class="card-header bg-light">
                                            <h3 class="h6 mb-0">История генераций</h3>
                                        </div>
                                        <div class="card-body p-2">
                                            <div class="list-group list-group-flush">
                                                @foreach (var item in generationHistory.Take(3))
                                                {
                                                    <div class="list-group-item d-flex justify-content-between align-items-center py-2">
                                                        <div class="text-truncate me-2" style="max-width: 70%;" title="@item.Description">
                                                            @item.Description
                                                        </div>
                                                        <small class="text-muted">@item.CreatedAt.ToString("HH:mm")</small>
                                                    </div>
                                                }
                                            </div>
                                            @if (generationHistory.Count > 3)
                                            {
                                                <div class="text-center mt-2">
                                                    <button class="btn btn-link btn-sm" @onclick="ShowFullHistory">
                                                        Показать все (@generationHistory.Count)
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    
                    <!-- Примеры описаний -->
                    <div class="row mt-5">
                        <div class="col-12">
                            <div class="card bg-light">
                                <div class="card-header">
                                    <h3 class="h5 mb-0">Примеры описаний для вдохновения</h3>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        @foreach (var example in exampleDescriptions)
                                        {
                                            <div class="col-md-4 mb-3">
                                                <div class="card h-100 example-card" @onclick="() => LoadExample(example)">
                                                    <div class="card-body">
                                                        <p class="card-text small">"@example.Description"</p>
                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <small class="text-muted">@example.Style</small>
                                                            <span class="badge bg-primary">@example.Complexity%</span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ArtDescription artDescription = new();
    private bool isGenerating = false;
    private string generatedImageUrl = string.Empty;
    private List<GenerationHistoryItem> generationHistory = new();
    private bool showFullHistory = false;

    // Стили искусства
    private readonly List<ArtStyle> artStyles = new()
    {
        new ArtStyle { Value = "realism", Text = "Реализм" },
        new ArtStyle { Value = "impressionism", Text = "Импрессионизм" },
        new ArtStyle { Value = "abstract", Text = "Абстракционизм" },
        new ArtStyle { Value = "surrealism", Text = "Сюрреализм" },
        new ArtStyle { Value = "popart", Text = "Поп-арт" },
        new ArtStyle { Value = "digital", Text = "Цифровое искусство" }
    };

    // Примеры описаний
    private readonly List<ArtDescription> exampleDescriptions = new()
    {
        new ArtDescription { 
            Description = "Закат над горным озером, отражение вершин в спокойной воде, теплые оранжевые и фиолетовые тона", 
            Style = "realism", 
            Complexity = 80 
        },
        new ArtDescription { 
            Description = "Абстрактная композиция из геометрических фигур в синих и зеленых тонах с золотыми акцентами", 
            Style = "abstract", 
            Complexity = 60 
        },
        new ArtDescription { 
            Description = "Фантастический город будущего с летающими автомобилями и неоновыми вывесками в ночное время", 
            Style = "digital", 
            Complexity = 90 
        }
    };

    protected override async Task OnInitializedAsync()
    {
        // Загрузка истории из локального хранилища (если нужно)
        await LoadHistory();
    }

    private async Task GenerateArt()
    {
        isGenerating = true;
        StateHasChanged();

        // Имитация процесса генерации (в реальном приложении здесь был бы вызов API)
        await Task.Delay(2000);

        // Генерация случайного URL изображения (заглушка)
        var random = new Random();
        var width = 400 + (artDescription.Complexity / 10) * 50;
        var height = 300 + (artDescription.Complexity / 10) * 50;
        
        // Используем сервис placeholder изображений с тематикой искусства
        generatedImageUrl = $"https://picsum.photos/{width}/{height}?random={random.Next(1000)}";

        // Сохраняем в историю
        generationHistory.Insert(0, new GenerationHistoryItem
        {
            Description = artDescription.Description,
            Style = artDescription.Style,
            ImageUrl = generatedImageUrl,
            CreatedAt = DateTime.Now
        });

        // Сохраняем историю в локальное хранилище
        await SaveHistory();

        isGenerating = false;
        StateHasChanged();
    }

    private void ResetForm()
    {
        artDescription = new ArtDescription();
        generatedImageUrl = string.Empty;
        StateHasChanged();
    }

    private void LoadExample(ArtDescription example)
    {
        artDescription = new ArtDescription
        {
            Description = example.Description,
            Style = example.Style,
            Complexity = example.Complexity
        };
        StateHasChanged();
    }

    private async Task DownloadImage()
    {
        if (!string.IsNullOrEmpty(generatedImageUrl))
        {
            // В реальном приложении здесь была бы логика скачивания
            await JSRuntime.InvokeVoidAsync("alert", "Функция скачивания будет реализована в полной версии");
        }
    }

    private async Task ShareImage()
    {
        if (!string.IsNullOrEmpty(generatedImageUrl))
        {
            // В реальном приложении здесь была бы логика поделиться
            await JSRuntime.InvokeVoidAsync("alert", "Функция поделиться будет реализована в полной версии");
        }
    }

    private void ShowFullHistory()
    {
        showFullHistory = !showFullHistory;
        // В реальном приложении здесь можно открыть модальное окно с полной историей
    }

    private async Task SaveHistory()
    {
        // Сохранение истории в локальное хранилище (упрощенная версия)
        try
        {
            var historyJson = System.Text.Json.JsonSerializer.Serialize(generationHistory.Take(10));
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "artGenerationHistory", historyJson);
        }
        catch
        {
            // Игнорируем ошибки при сохранении
        }
    }

    private async Task LoadHistory()
    {
        // Загрузка истории из локального хранилища (упрощенная версия)
        try
        {
            var historyJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "artGenerationHistory");
            if (!string.IsNullOrEmpty(historyJson))
            {
                generationHistory = System.Text.Json.JsonSerializer.Deserialize<List<GenerationHistoryItem>>(historyJson) ?? new();
            }
        }
        catch
        {
            generationHistory = new();
        }
    }

    // Модели данных
    public class ArtDescription
    {
        [Required(ErrorMessage = "Введите описание картины")]
        [MinLength(10, ErrorMessage = "Описание должно содержать не менее 10 символов")]
        public string Description { get; set; } = string.Empty;
        
        public string Style { get; set; } = "realism";
        public int Complexity { get; set; } = 50;
    }

    public class ArtStyle
    {
        public string Value { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
    }

    public class GenerationHistoryItem
    {
        public string Description { get; set; } = string.Empty;
        public string Style { get; set; } = string.Empty;
        public string ImageUrl { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
    }
}
